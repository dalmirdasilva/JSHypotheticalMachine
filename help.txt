HELP

========================================================================

The simulator (with Extended Instruction Set)

========================================================================

Data/Address wide: 8 bits

1 8 bits accumulator (AC)
1 8 bits program counter (PC)
1 State register with 2 codes: negative (N) and zero (Z)

Neander's instruction set

Code	Instruction		Description
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0000	NOP			No Operation
0001	STA			MEM(adr) << AC
0010	LDA			AC << MEM(adr)
0011	ADD			AC << MEM(adr) + AC
0100	OR			AC << MEM(adr) OR AC
0101	AND			AC << MEM(adr) AND AC
0110	NOT			AC << NOT AC
1000	JMP			PC << adr
1001	JN			IF N=1 THEN PC << adr
1010	JZ			IF Z=1 THEN PC << adr
1111	HLT			Execution stops (halt)

Extended instructions

Code	Instruction		Description
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1011	CALL			Call a subroutine (TOS << PC, PC << adr)
1100	RET			Returns from a subroutine (PC << TOS)
1011	PUSH			Push the AC into TOS (TOS << AC)
1011	POP			Pop the TOS into AC (AC << TOS)


Compilador:
------------------------------------------------------------------------

Syntax:

------
.db
Specify a value to a given memory address.

Ex: .db 10 11
Stores the value 11 at the memory address 10

NOTE: You can use .db at any point in your program. However, .db
has precedence, so if you put some instruction on the same place, the
.db will override the instruction. 


------
# Comment

It is a commentary, the line that starts with # will be considered as
a commentary.


------
:label

Labels are defined always a : starts a line. If some :label appears 
on any other place in the line, it will be considered as you are using it.

NOTE: You can use a label before create it. However, if the label is not
created until the end of the program, an error will be raised. 

Ex:

#defining
:my_label

#using: 
jmp :my_label

EOH 
